# ===== templates/deployment.yaml =====
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.app.namespace }}
  labels:
    {{- range $key, $value := .Values.app.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        {{- range $key, $value := .Values.app.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      containers:
        - name: {{ .Values.container.name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.container.port }}
          {{- if .Values.container.env }}
          env:
            {{- range .Values.container.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: {{ .Values.app.name }}-storage
              mountPath: {{ .Values.persistence.mountPath }}
          {{- end }}
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            {{- if eq .Values.probes.readiness.type "httpGet" }}
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            {{- else if eq .Values.probes.readiness.type "exec" }}
            exec:
              command:
                {{- range .Values.probes.readiness.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            {{- if eq .Values.probes.liveness.type "httpGet" }}
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            {{- else if eq .Values.probes.liveness.type "exec" }}
            exec:
              command:
                {{- range .Values.probes.liveness.command }}
                - {{ . }}
                {{- end }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
      {{- if .Values.security.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.security.imagePullSecrets }}
        - name: {{ .name }}
        {{- end }}
      {{- end }}
      {{- if .Values.persistence.enabled }}
      volumes:
        - name: {{ .Values.app.name }}-storage
          persistentVolumeClaim:
            claimName: {{ .Values.app.name }}-pvc
      {{- end }}