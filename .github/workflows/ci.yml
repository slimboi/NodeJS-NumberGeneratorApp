name: Node.js CI with Docker + Docker Hub
on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'numgen-stack/values.yaml'  # Skip CI when ArgoCD Image Updater updates values.yaml
      - 'numgen-stack/.argocd-source-*.yaml'  # Skip CI for ArgoCD override files
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:  # Enables manual triggering

permissions:
  contents: read  # Reduced permissions since we're not doing git operations

jobs:
  check-skip:
    name: Check if should skip CI
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - name: Check commit message
        id: check
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"automatic update"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"[argocd-image-updater]"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]]; then
            echo "should_skip=true" >> "$GITHUB_OUTPUT"
            echo "Skipping CI due to commit message: ${{ github.event.head_commit.message }}"
          else
            echo "should_skip=false" >> "$GITHUB_OUTPUT"
          fi

  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should_skip != 'true'
    outputs:
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set Short SHA
        id: set-sha
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    needs: [check-skip, checkout]
    if: needs.check-skip.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
        working-directory: app-docker-multistage
      - run: npm run lint
        working-directory: app-docker-multistage

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [check-skip, lint]
    if: needs.check-skip.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
        working-directory: app-docker-multistage
      - run: npm test
        working-directory: app-docker-multistage

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [check-skip, test]
    if: needs.check-skip.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and Push Docker Image
        working-directory: app-docker-multistage
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          IMAGE=$DOCKERHUB_USERNAME/$REPOSITORY_NAME:$SHORT_SHA
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "Image pushed: $IMAGE"